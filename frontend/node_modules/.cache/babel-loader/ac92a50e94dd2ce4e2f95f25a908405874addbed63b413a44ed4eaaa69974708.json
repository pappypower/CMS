{"ast":null,"code":"var _jsxFileName = \"E:\\\\Papi\\\\Projects\\\\CMS\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authApi } from '../services/api';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [isLoading, setIsLoading] = useState(true);\n  const isAuthenticated = !!user && !!token;\n\n  // Check if user is authenticated on app load\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      const savedToken = localStorage.getItem('token');\n      const savedUser = localStorage.getItem('user');\n      if (savedToken && savedUser) {\n        try {\n          setToken(savedToken);\n          setUser(JSON.parse(savedUser));\n\n          // Verify token with backend\n          await authApi.checkAuth();\n        } catch (error) {\n          // Token is invalid, clear storage\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n          setToken(null);\n          setUser(null);\n        }\n      }\n      setIsLoading(false);\n    };\n    checkAuthStatus();\n  }, []);\n  const login = async credentials => {\n    try {\n      setIsLoading(true);\n      const response = await authApi.login(credentials);\n      const authData = response.data;\n      setToken(authData.token);\n      setUser(authData.user);\n\n      // Save to localStorage\n      localStorage.setItem('token', authData.token);\n      localStorage.setItem('user', JSON.stringify(authData.user));\n      toast.success(`Welcome back, ${authData.user.firstName}!`);\n      return true;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed';\n      toast.error(message);\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const register = async userData => {\n    try {\n      setIsLoading(true);\n      const response = await authApi.register(userData);\n      const authData = response.data;\n      setToken(authData.token);\n      setUser(authData.user);\n\n      // Save to localStorage\n      localStorage.setItem('token', authData.token);\n      localStorage.setItem('user', JSON.stringify(authData.user));\n      toast.success(`Welcome, ${authData.user.firstName}! Your account has been created.`);\n      return true;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const message = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Registration failed';\n      toast.error(message);\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n\n    // Call logout endpoint (optional, for server-side cleanup)\n    authApi.logout().catch(() => {\n      // Ignore errors, user is logging out anyway\n    });\n    toast.info('You have been logged out successfully');\n  };\n  const updateUser = updatedUser => {\n    setUser(updatedUser);\n    localStorage.setItem('user', JSON.stringify(updatedUser));\n  };\n  const value = {\n    user,\n    token,\n    isAuthenticated,\n    isLoading,\n    login,\n    register,\n    logout,\n    updateUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"Ezm03IKmqt4OOZSX4/9a6guLbc0=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authApi","toast","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","user","setUser","token","setToken","localStorage","getItem","isLoading","setIsLoading","isAuthenticated","checkAuthStatus","savedToken","savedUser","JSON","parse","checkAuth","error","removeItem","login","credentials","response","authData","data","setItem","stringify","success","firstName","_error$response","_error$response$data","message","register","userData","_error$response2","_error$response2$data","logout","catch","info","updateUser","updatedUser","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["E:/Papi/Projects/CMS/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { User, UserInfo, LoginRequest, RegisterRequest, AuthResponse } from '../types';\r\nimport { authApi } from '../services/api';\r\nimport { toast } from 'react-toastify';\r\n\r\ninterface AuthContextType {\r\n  user: UserInfo | null;\r\n  token: string | null;\r\n  isAuthenticated: boolean;\r\n  isLoading: boolean;\r\n  login: (credentials: LoginRequest) => Promise<boolean>;\r\n  register: (userData: RegisterRequest) => Promise<boolean>;\r\n  logout: () => void;\r\n  updateUser: (user: UserInfo) => void;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<UserInfo | null>(null);\r\n  const [token, setToken] = useState<string | null>(localStorage.getItem('token'));\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  const isAuthenticated = !!user && !!token;\r\n\r\n  // Check if user is authenticated on app load\r\n  useEffect(() => {\r\n    const checkAuthStatus = async () => {\r\n      const savedToken = localStorage.getItem('token');\r\n      const savedUser = localStorage.getItem('user');\r\n\r\n      if (savedToken && savedUser) {\r\n        try {\r\n          setToken(savedToken);\r\n          setUser(JSON.parse(savedUser));\r\n          \r\n          // Verify token with backend\r\n          await authApi.checkAuth();\r\n        } catch (error) {\r\n          // Token is invalid, clear storage\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('user');\r\n          setToken(null);\r\n          setUser(null);\r\n        }\r\n      }\r\n      \r\n      setIsLoading(false);\r\n    };\r\n\r\n    checkAuthStatus();\r\n  }, []);\r\n\r\n  const login = async (credentials: LoginRequest): Promise<boolean> => {\r\n    try {\r\n      setIsLoading(true);\r\n      const response = await authApi.login(credentials);\r\n      const authData: AuthResponse = response.data;\r\n\r\n      setToken(authData.token);\r\n      setUser(authData.user);\r\n      \r\n      // Save to localStorage\r\n      localStorage.setItem('token', authData.token);\r\n      localStorage.setItem('user', JSON.stringify(authData.user));\r\n      \r\n      toast.success(`Welcome back, ${authData.user.firstName}!`);\r\n      return true;\r\n    } catch (error: any) {\r\n      const message = error.response?.data?.message || 'Login failed';\r\n      toast.error(message);\r\n      return false;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const register = async (userData: RegisterRequest): Promise<boolean> => {\r\n    try {\r\n      setIsLoading(true);\r\n      const response = await authApi.register(userData);\r\n      const authData: AuthResponse = response.data;\r\n\r\n      setToken(authData.token);\r\n      setUser(authData.user);\r\n      \r\n      // Save to localStorage\r\n      localStorage.setItem('token', authData.token);\r\n      localStorage.setItem('user', JSON.stringify(authData.user));\r\n      \r\n      toast.success(`Welcome, ${authData.user.firstName}! Your account has been created.`);\r\n      return true;\r\n    } catch (error: any) {\r\n      const message = error.response?.data?.message || 'Registration failed';\r\n      toast.error(message);\r\n      return false;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setToken(null);\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    \r\n    // Call logout endpoint (optional, for server-side cleanup)\r\n    authApi.logout().catch(() => {\r\n      // Ignore errors, user is logging out anyway\r\n    });\r\n    \r\n    toast.info('You have been logged out successfully');\r\n  };\r\n\r\n  const updateUser = (updatedUser: UserInfo) => {\r\n    setUser(updatedUser);\r\n    localStorage.setItem('user', JSON.stringify(updatedUser));\r\n  };\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    token,\r\n    isAuthenticated,\r\n    isLoading,\r\n    login,\r\n    register,\r\n    logout,\r\n    updateUser,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = (): AuthContextType => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}